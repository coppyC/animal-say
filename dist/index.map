{"version":3,"sources":["../lib/animals.js","../lib/render.js","../lib/animation.js","../lib/Message.class.js","../lib/Dialog.class.js","../lib/Loading.singleton.js","../lib/Progress.singleton.js","../lib/Animal.class.js","index.js"],"names":["animals","chameleon","require","Object","defineProperty","enumerable","get","keys","Math","random","length","render","el","target","document","querySelector","appendChild","Element","console","error","body","h","tagName","option","children","createElement","classname","classList","add","style","cssText","assign","innerHTML","Array","append","parseCss","css","createAnimation","uniCode","String","slice","keyframes","cssObj","replace","stylesheel","ctx","uniname","styled","div","raw","img","form","input","button","animation","animations","execOriginalAnimatiom","element","duration","animationDuration","animationName","visibility","Promise","resolve","setTimeout","execAnimatiom","transitionProperty","transitionDuration","delay","ms","queueAnimation","animationList","i","exec","promise","then","$msgBox","elements","Message","word","conf","type","map","cloneNode","$item","$animal","$word","src","animal","name","innerText","background","msg","color","addEventListener","e","remove","mount","base","increase","height","offsetHeight","marginBottom","FFFE","Dialog","content","tools","close","$box","$mask","$dialog","$text","$form","$answer","$btn0","$btn1","dialog","TEXT_cancel","TEXT_confirm","BG_mask","BG_dialog","BG_cancel","BG_confirm","COLOR_dialog","COLOR_cancel","COLOR_confirm","required","placeholder","width","justifyContent","tool","no","yes","reject","options","response","submitHandle","preventDefault","autoClose","indexOf","answer","value","start","tipText","loading","flexDirection","direction","stop","$progressBox","$progress","running","percentage","max","min","progress","keep","position","top","bottom","BG_progress","COLOR_text","Animal","setPrototypeOf","source","something","question","say","call","tell","confirm","ask","quiet","BG_primary","BG_warn","BG_danger","window"],"mappings":"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","file":"index.map","sourceRoot":"../lib","sourcesContent":["/** animal manager */\n\n/** @type {Object<string,string>} */\nconst animals = {\n  chameleon: require('../animals/chameleon.png'),\n}\n\nObject.defineProperty(animals, 'random', {\n  enumerable: false,\n  get(){\n    const keys = Object.keys(this)\n    const name = keys [~~ (Math.random() * keys.length)]\n    return this[name]\n  }\n})\n\nexport default animals\n","/**\n * @typedef {{ classname: String[], style: CSSStyleDeclaration }} Option\n */\n\n/** mount element into page\n * @param {Element} el\n * @param {String|Element} target */\nexport default function render(el, target) {\n  if(!target)\n    document.body.appendChild(el)\n  else if(typeof target == 'string')\n    document.querySelector(target).appendChild(el)\n  else if(target instanceof Element)\n    target.appendChild(el)\n  else\n    console.error('target should be a string or HTMLelement')\n}\n\n/** render element\n * @param {String} tagName\n * @param {Option} option\n * @param {Element[]} children\n * @returns {HTMLElement} */\nexport function h(tagName, option, children) {\n  const el = document.createElement(tagName)\n  if(option) {\n    if(typeof option.classname == 'string')\n      el.classname = option.classname\n    else if(typeof option.classname == 'object')\n      el.classList.add(...option.classname)\n    if(typeof option.style == 'string')\n      el.style.cssText = option.style\n    else if(typeof option.style == 'object')\n      Object.assign(el.style, option.style)\n  }\n  if(children) {\n    if(typeof children == 'string')\n      el.innerHTML = children\n    else if(children instanceof Array)\n      el.append(...children)\n  }\n  return el\n}\n\n/** parse css to module object  */\nfunction parseCss(css, createAnimation) {\n  const uniCode = String(Math.random()).slice(2)\n  let keyframes = ''\n  const cssObj = {}\n  css = String(css).replace(/\\.([^.,{ ]+) *\\n? *{([^}]*)}/g, function(stylesheel, classname, ctx) {\n    const uniname = classname + '-animal-say-' + uniCode\n    cssObj[classname] = uniname\n    if(createAnimation)\n      keyframes += `@keyframes ${uniname} { 0% { ${ctx} } } \\n`\n    return stylesheel.replace(classname, uniname)\n  })\n  css = keyframes + css\n  render(h('style', null, css), 'head')\n  return cssObj\n}\n\nexport const styled = {\n  div(...css) {\n    return h('div', { style: String.raw(...css) })\n  },\n  /** @returns {HTMLImageElement} */\n  img(...css) {\n    return h('img', { style: String.raw(...css) })\n  },\n  form(...css) {\n    return h('form', { style: String.raw(...css) })\n  },\n  /** @returns {HTMLInputElement} */\n  input(...css) {\n    return h('input', { style: String.raw(...css) })\n  },\n  /** @returns {HTMLButtonElement} */\n  button(...css) {\n    return h('button', { style: String.raw(...css) })\n  },\n  /** css module */\n  css(...style) {\n    return parseCss(String.raw(...style))\n  },\n  /** animation module */\n  animation(...style) {\n    return parseCss(String.raw(...style), true)\n  },\n  keyframes(...keyframes) {\n    return {}\n  }\n}\n\nexport const css = String.raw\n","import { styled } from './render'\n\nconst animations = styled.animation `\n.fade {\n  opacity: 0;\n}\n.slide {\n  transform: translateX(150%);\n}\n.scroll {\n  transform: translateX(150%) rotate(360deg);\n}\n`\n\nexport default animations\n\n/** @typedef {'fade'|'slide'|'scroll'|'none'} AnimationName */\n\n/** execute the origin animation\n * @param {HTMLElement} element\n * @param {AnimationName} animation\n * @param {Number} duration ms */\nexport function execOriginalAnimatiom(element, animation, duration=100) {\n  if(animation==='none') return\n  animation = animations[animation]\n  element.style.animationDuration = duration + 'ms'\n  element.style.animationName = animation\n  element.style.visibility = 'visible'\n  return new Promise(resolve =>\n    setTimeout(resolve, duration)\n  )\n}\n\n/** execute the animation\n * @param {HTMLElement} element\n * @param {AnimationName|CSSStyleDeclaration} animation\n * @param {Number} duration ms */\nexport function execAnimatiom(element, animation, duration=100) {\n  if(animation==='none') return\n  element.style.transitionProperty = 'all'\n  element.style.transitionDuration = duration + 'ms'\n  if(typeof animation === 'string')\n    element.classList.add(animations[animation])\n  else\n    Object.assign(element.style, animation)\n  return new Promise(resolve => {\n    setTimeout(resolve, duration)\n  })\n}\n\nexport function delay(ms) {\n  return new Promise(resolve =>\n    setTimeout(resolve, ms)\n  )\n}\n\n/**\n   * @param {Function[]} animationList\n   * @param {Number} duration */\nexport function queueAnimation(animationList) {\n  function exec() {\n    if(i>=animationList.length) return\n    animation = animationList[i++]\n    let promise = animation()\n    if(promise instanceof Promise)\n      promise.then(exec)\n    else\n      exec()\n  }\n  let i = 0\n  let animation\n  exec()\n}\n","import render, { styled } from './render'\nimport { execAnimatiom, queueAnimation, execOriginalAnimatiom, delay } from './animation'\nimport animals from './animals'\n\nconst $msgBox = styled.div `\n  position: fixed;\n  top: 4px;\n  max-width: 95vw;\n  z-index: 10;\n  right: 4px; `\nrender($msgBox)\n\nconst elements = [\n  styled.div `\n    margin-bottom: 5px;\n    display: flex;\n    justify-content: flex-end;\n    align-items: center;`,\n  styled.img `\n    visibility: hidden;\n    width: 38px;\n    height: 38px;\n    margin: 0 4px; `,\n  styled.div `\n    visibility: hidden;\n    font-size: 16px;\n    color: #fff;\n    line-height: 30px;\n    min-height: 30px;\n    padding: 0 14px;\n    border-radius: 20px; `\n]\n\nexport default class Message {\n  /**\n   * @param {Object} param0\n   * @param {String} param0.word\n   * @param {'primary'|'warn'|'danger'} param0.type\n   * @param {import('./Animal.class').Configure} param0.conf\n   */\n  constructor({ word, conf, type='primary' }) {\n    /** @type {HTMLElement[]} */\n    const [$item, $animal, $word] = elements.map(el => el.cloneNode())\n    $animal.src = animals[conf.animal.name]\n    $word.innerText = word\n    $word.style.background = conf.msg['BG_' + type]\n    $word.style.color = conf.msg['COLOR_' + type]\n    $item.append($word, $animal)\n    $item.addEventListener('click', e => $item.remove())\n    render($item, conf.msg.mount || $msgBox)\n    let {duration} = conf.msg\n    if(typeof duration === 'number')\n      duration = { base: duration, increase: 0 }\n    queueAnimation([\n      () => execOriginalAnimatiom($animal, conf.animal.animation, 300),\n      () => execOriginalAnimatiom($word, conf.msg.animation, 200),\n      () => delay((duration.base || 1500) + (duration.increase || 50) * word.length),\n      () => $item.style.height = ($item.offsetHeight + 'px'),\n      () => execAnimatiom($word, conf.msg.animation, 150),\n      () => execAnimatiom($animal, conf.animal.animation, 300),\n      () => execAnimatiom($item, { height:0, marginBottom:0 }, 1000),\n      () => $item.remove(),\n    ])\n  }\n}\n","import render, { styled } from './render'\nimport animals from './animals'\nimport { queueAnimation, execOriginalAnimatiom } from './animation'\n\nconst FFFE = 'rgba(255,255,255,.93)'\n\nconst elements = [\n  styled.div `\n    /* display: none; */\n    position: fixed;\n    top: 0;\n    left: 0;\n    width: 100vw;\n    height: 100vh;\n    z-index: 99;\n  `,\n  styled.div `\n    position: absolute;\n    top: 0;\n    right: 0;\n    width: 100%;\n    height: 100%;\n  `,\n  styled.div `\n    position: relative;\n    background: linear-gradient(135deg, ${FFFE} 0, ${FFFE} 25%, #ddd 75%);\n    transform: translateY(-50%);\n    border-radius: 10px;\n    border-bottom-right-radius: 50% 60px;\n    padding: 1px;\n    font-size: 20px;\n    width: 380px;\n    max-width: 90vw;\n    margin: 45vh auto 0;\n  `,\n  styled.img `\n    position: absolute;\n    visibility: hidden;\n    width: 60px;\n    height: 60px;\n    right: 0;\n    bottom: 0;\n  `,\n  styled.div `\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    color: #2e484c;\n    line-height: 1.8em;\n    box-sizing: border-box;\n    margin: 15px 20px;\n    overflow: scroll;\n    min-height: 100px;\n    max-height: 30vh;\n  `,\n  styled.form `\n    display: flex;\n    white-space: nowrap;\n    height: 40px;\n    width: 75%;\n    padding-left: 15px;\n  `,\n  styled.input `\n    display: inline-flex;\n    flex: 1 1 auto;\n    align-items: center;\n    justify-content: center;\n    font-size: 15px;\n    padding: 0 1em;\n    border: 1px #ddd solid;\n    border-radius: 15px;\n    width: 100%;\n    box-sizing: border-box;\n    height: 30px;\n    margin-right: 10px;\n  `,\n  styled.button `\n    flex: 1 0 auto;\n    display: inline-flex;\n    cursor: pointer;\n    max-width: 120px;\n    font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif;\n    background: #fff;\n    color: #ccc;\n    align-items: center;\n    justify-content: center;\n    font-size: 15px;\n    padding: 0 .5em;\n    border: 1px #ddd solid;\n    border-radius: 15px;\n    box-sizing: border-box;\n    min-width: 30px;\n    height: 30px;\n    margin-right: 10px;\n  `,\n]\n\nexport default class Dialog {\n  /**\n   * @param {Object} param0\n   * @param {String} param0.content\n   * @param {('yes'|'no'|'input')[]} param0.tools\n   * @param {import('./Animal.class').Configure} param0.conf\n   */\n  constructor({ content, tools, conf }) {\n    function close() { $box.remove() }\n    /** @type {HTMLElement[]} */\n    const [$box, $mask, $dialog, $animal, $text, $form, $answer, $btn0] = elements.map(el => el.cloneNode())\n    /** @type {HTMLButtonElement} */\n    const $btn1 = $btn0.cloneNode()\n    $btn0.type = 'button'\n    $btn0.innerText = conf.dialog.TEXT_cancel\n    $btn1.innerText = conf.dialog.TEXT_confirm\n    $text.innerHTML = `<div>${content}</div>`\n    $mask.style.background = conf.dialog.BG_mask\n    $dialog.style.background = conf.dialog.BG_dialog\n    $btn0.style.background = conf.dialog.BG_cancel\n    $btn1.style.background = conf.dialog.BG_confirm\n    $dialog.style.background = conf.dialog.COLOR_dialog\n    $btn0.style.color = conf.dialog.COLOR_cancel\n    $btn1.style.color = conf.dialog.COLOR_confirm\n    $animal.src = animals[conf.animal.name]\n    $answer.required = !!conf.dialog.required\n    $answer.placeholder = conf.dialog.placeholder || ''\n    $mask.addEventListener('click', close)\n    $box.append($mask, $dialog)\n    $dialog.append($text, $form, $animal)\n    if(tools.length==1) {\n      $form.style.width = '100%'\n      $form.style.justifyContent = 'center'\n    }\n    for(let tool of tools) {\n      $form.append({\n        input: $answer,\n        no: $btn0,\n        yes: $btn1,\n      }[tool])\n    }\n    /** @type {Promise<{ close:Function, answer:String }>} */\n    this.promise = new Promise((resolve, reject) => {\n      const options = {}\n      let response = resolve\n      if(!conf.dialog.autoClose) options.close = close\n      function submitHandle(e) {\n        e && e.preventDefault()\n        if(conf.dialog.autoClose) close()\n        if(~tools.indexOf('input'))\n          options.answer = $answer.value\n        response(options)\n      }\n      $form.addEventListener('submit', submitHandle)\n      $btn0.addEventListener('click', () => {\n        response = reject\n        submitHandle()\n      })\n    })\n    render($box)\n    queueAnimation([\n      () => execOriginalAnimatiom($animal, conf.animal.animation, 200)\n    ])\n  }\n}\n","import render, { styled } from './render'\nimport animals from './animals';\n\nconst $box = styled.div `\n  height: 30px;\n  user-select: none;\n  background-image: linear-gradient( 90deg, transparent 0, transparent 75%, rgba(255, 255, 255, .3) 0),\n                    linear-gradient(180deg, transparent 0, transparent 75%, rgba(255, 255, 255, .3) 0);\n  background-color: rgba(230, 230, 230, .8);\n  background-size: 80px 80px;\n  background-repeat: repeat;\n  display: flex;\n  position: fixed;\n  align-items: center;\n  justify-content: center;\n  top: 0;\n  left: 0;\n  width: 100vw;\n  height: 100vh;\n  z-index: 99;\n`\nconst $animal = styled.img `\n  width: 60px;\n  height: 60px;\n`\nconst $text = styled.div `\n  font-size: 20px;\n  margin: 5px 10px;\n`\n$box.append($animal, $text)\n\nexport default {\n  /**\n   * @param {String} tipText\n   * @param {import('./Animal.class').Configure} conf\n   */\n  start(tipText='', conf) {\n    $animal.src = animals[conf.animal.name]\n    $text.innerText = tipText\n    $box.style.background = conf.loading.BG_mask\n    $box.style.flexDirection = conf.loading.direction\n    render($box)\n  },\n  stop() {\n    $box.remove()\n  }\n}\n","import render, { styled } from './render'\nimport animals from './animals'\n\nconst keyframes = styled.animation `\n  @keyframes scroll {\n\n  }\n`\n\nconst $box = styled.div `\n  position: fixed;\n  user-select: none;\n  background: rgba(255,255,255,.5);\n  left: 0;\n  width: 100vw;\n  padding: 10px 0;\n  z-index: 99;\n  background-image: linear-gradient( 135deg, transparent 0, transparent 45%, rgba(255, 255, 255, .3) 0, rgba(255, 255, 255, .3) 55%, transparent 0),\n                    linear-gradient( 225deg, transparent 0, transparent 45%, rgba(255, 255, 255, .3) 0, rgba(255, 255, 255, .3) 55%, transparent 0);\n  background-color: rgba(230, 230, 230, .6);\n  background-size: 100px 100px;\n  background-repeat: repeat;\n`\nconst $progressBox = styled.div `\n  width: 95%;\n  margin: 20px auto;\n  height: 30px;\n  border-radius: 15px;\n  box-sizing: border-box;\n  overflow: hidden;\n  background: rgba(255,255,255,.7);\n`\n\nconst $progress = styled.div `\n  position: relative;\n  background: #6aab20;\n  transition: all 500ms linear;\n  width: 50%;\n  height: 100%;\n`\nconst $animal = styled.img `\n  position: absolute;\n  width: 30px;\n  height: 30px;\n  transform: rotateY(180deg) scale(1.2);\n  top: calc(50% - 15px);\n  right: -15px;\n`\nconst $text = styled.div `\n  display: flex;\n  height: 100%;\n  color: #fff;\n  align-items: center;\n  justify-content: center;\n`\n\n$box.append($progressBox)\n$progressBox.append($progress)\n$progress.append($animal, $text)\n\nexport default {\n  running: false,\n  /**\n   * @param {Number} percentage\n   * @param {import('./Animal.class').Configure} conf\n   */\n  start(percentage, conf) {\n    percentage = Math.max(percentage, 0)\n    percentage = Math.min(percentage, 100)\n    if(percentage >= 100)\n      setTimeout(() => this.stop(), conf.progress.keep)\n    $box.style.background = conf.progress.BG_mask\n    $box.style[conf.progress.position] = 0\n    $box.style[{top:'bottom',bottom:'top'}[conf.progress.position]] = 'unset'\n    $progress.style.transitionDuration = (conf.progress.keep * 0.7) + 'ms'\n    $progress.style.width = percentage + '%'\n    $progress.style.background = conf.progress.BG_progress\n    $text.style.color = conf.progress.COLOR_text\n    $text.innerText = percentage + '%'\n    if(!this.running){\n      $animal.src = animals[conf.animal.name]\n      render($box)\n      this.running = true\n    }\n  },\n  stop() {\n    $box.remove()\n    this.running = false\n  }\n}\n","import animals from './animals'\nimport Message from './Message.class'\nimport Dialog from './Dialog.class'\nimport Loading from './Loading.singleton'\nimport Progress from './Progress.singleton'\n\nexport default class Animal {\n  static get list() {\n    return Object.keys(animals)\n  }\n  static add(name, source) {\n    animals[name] = source\n  }\n  static remove(name) {\n    delete animals[name]\n  }\n  static clear() {\n    for(let name in animals)\n      Animal.remove(name)\n  }\n\n  /** send a message use default configure */\n  static say(word) {\n    const {conf} = this\n    new Message({ word, conf })\n  }\n  /** call a dialog only with confirm button */\n  static tell(something) {\n    return new Dialog({\n      content: something,\n      tools: ['yes'],\n      conf: this.conf,\n    }).promise\n  }\n  /** call a dialog only with yes and no button */\n  static confirm(question) {\n    return new Dialog({\n      content: question,\n      tools: ['no','yes'],\n      conf: this.conf,\n    }).promise\n  }\n  /** call a dialog with true and false buttons */\n  static ask(question) {\n    return new Dialog({\n      content: question,\n      tools: ['input', 'yes', 'no'],\n      conf: this.conf,\n    }).promise\n  }\n  /** show loading */\n  static loading(tipText) {\n    Loading.start(tipText, this.conf)\n  }\n  /** @param {Number} percentage 0~100 */\n  static progress(percentage) {\n    Progress.start(percentage, this.conf)\n  }\n  /** @param {'loading'|'progress'} type */\n  static quiet(type='loading') {\n    switch(type) {\n      case 'loading':\n        Loading.stop()\n        break\n      case 'progress':\n        Progress.stop()\n        break\n    }\n  }\n\n  /** @param {Configure} conf */\n  constructor(conf={}) {\n    for(let name in conf)\n      Object.setPrototypeOf(conf[name], Animal.conf[name])\n    Object.setPrototypeOf(conf, Animal.conf)\n    this.conf = conf\n  }\n  say(word) {\n    Animal.say.call(this, word)\n  }\n  tell(something) {\n    Animal.tell.call(this, something)\n  }\n  confirm(question) {\n    Animal.confirm.call(this, question)\n  }\n  ask(question) {\n    Animal.ask.call(this, question)\n  }\n  loading(tipText) {\n    Animal.loading.call(this, tipText)\n  }\n  /** @param {Number} percentage 0~100 */\n  progress(percentage) {\n    Animal.progress.call(this, percentage)\n  }\n  /** @param {'loading'|'progress'} type */\n  quiet(type='loading') {\n    Animal.quiet.call(this, type)\n  }\n}\n\n\n/** @type {Configure} */\nAnimal.conf = {\n  animal: {\n    name: \"random\",\n    animation: 'scroll',\n  },\n  msg: {\n    position: 'right',\n    animation: 'fade',\n    duration: 'auto',\n    BG_primary: 'rgba(20, 23, 24, .8)',\n    BG_warn: 'rgba(234, 113, 48, .85)',\n    BG_danger: 'rgba(213, 41, 41, .9)',\n  },\n  dialog: {\n    required: true,\n    autoClose: true,\n    BG_mask: 'rgba(0,0,0,.3)',\n    BG_confirm: 'rgb(144,199,77)',\n    COLOR_confirm: '#f9f9f9',\n    TEXT_confirm: '✔',\n    TEXT_cancel: '✘',\n  },\n  loading: {\n    direction: 'column',\n  },\n  progress: {\n    keep: 350,\n    position: 'bottom',\n  }\n}\n\n/**\n * @typedef {Object} Configure\n *\n * @property {Object} Configure.animal\n * @property {'chameleon'|'random'} Configure.animal.name\n * @property {'left'|'right'} Configure.animal.position !!! not support now\n * @property {'fade'|'slide'|'scroll'|'none'} Configure.animal.animation\n *\n * @property {Object} Configure.msg\n * @property {String|Element} Configure.msg.mount\n * @property {'left'|'right'} Configure.msg.position !!! not support now\n * @property {'auto'|Number|{base:Number,increase:Number}} Configure.msg.duration\n * @property {'fade'|'slide'|'scroll'|'none'} Configure.msg.animation\n * @property {String} Configure.msg.BG_primary the background color of say mode\n * @property {String} Configure.msg.BG_warn the background color of warn mode\n * @property {String} Configure.msg.BG_danger the background color of danger mode\n * @property {String} Configure.msg.COLOR_primary the text color for say mode\n * @property {String} Configure.msg.COLOR_warn the text color for warn mode\n * @property {String} Configure.msg.COLOR_danger the text color for danger mode\n *\n * @property {Object} dialog\n * @property {Boolean} dialog.autoClose auto close the dialog after click the confirm or cancel button\n * @property {Boolean} dialog.required must have an answer when click the confirm\n * @property {String} dialog.placeholder\n * @property {String} dialog.BG_mask\n * @property {String} dialog.BG_dialog\n * @property {String} dialog.BG_confirm\n * @property {String} dialog.BG_cancel\n * @property {String} dialog.COLOR_dialog\n * @property {String} dialog.COLOR_confirm\n * @property {String} dialog.COLOR_cancel\n * @property {String} dialog.TEXT_confirm\n * @property {String} dialog.TEXT_cancel\n *\n * @property {Object} loading\n * @property {'row'|'column'} loading.direction\n * @property {String} loading.BG_mask\n * @property {String} loading.COLOR_text\n *\n * @property {Object} progress\n * @property {Number} progress.keep the time(ms) to hide when the progress achieve 100%\n * @property {'top'|'bottom'} progress.position\n * @property {String} progress.BG_mask\n * @property {String} progress.BG_progress\n * @property {String} progress.COLOR_text\n */\n","import Animal from './Animal.class'\n\nwindow.Animal = Animal\n"]}